{"file":"index-DJrYF6pQ.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAyBM,UAAA,iBAA8B,IAAI,EAAE;AACpC,UAAA,YAA4B,IAAI,MAAiB;AAEjD,UAAA,WAAwB,IAAI,CAAC;AAC7B,UAAA,YAAyB,IAAI,CAAC;AAE9B,UAAA,kCAAkC,OAAO,KAAa,QAAiE;AACvH,UAAA;AACK,eAAA,MAAM,OAAO,iBAAiB;AAAA,UACnC,QAAQ;AAAA,UACR,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,UACF;AAAA,QAAA,CACD;AAAA,eAEM,OAAO;AACN,gBAAA,MAAM,4DAA4D,KAAK;AAAA,MACjF;AAAA,IAAA;AAGF,UAAM,uBAAuB,MAAM;;AAC7B,WAAA,uCAAW,YAAS,4CAAW,UAAX,mBAAkB;AACxC,2DAAW,UAAX,mBAAkB,gBAAlB,mBAA+B;AAAA,UAC7B,CAAC,aAAa;;AACH,qBAAA,SAAQA,MAAA,qCAAU,WAAV,gBAAAA,IAAkB;AACzB,sBAAA,SAAQC,MAAA,qCAAU,WAAV,gBAAAA,IAAkB;AAAA,UACtC;AAAA,UACA,CAAC,UAAU;AACD,oBAAA,MAAM,mCAAmC,KAAK;AAAA,UACxD;AAAA;AAAA,WAEC;AACH,gBAAQ,MAAM,+CAA+C;AAAA,MAC/D;AAAA,IAAA;AAEmB;AACf,UAAA,CAAC,UAAU,SAAS,GAAG,OAAO,CAAC,aAAa,YAAY,MAAwB;AACpF,YAAM,wBAAwB,MAAM,gCAAgC,aAAa,YAAY;AAC7F,UAAI,uBAAuB;AACzB,uBAAe,SAAQ,+DAAuB,UAAQ,+DAAuB,SAAQ;AAC1E,mBAAA,IAAI,iDAAgB,KAAK,EAAE;AAAA,MACxC;AAAA,IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;","names":["_a","_b"],"sources":["../../../../pages/index.vue"],"sourcesContent":["<template>\r\n\r\n  <Suspense>\r\n\r\n    <template #default>\r\n      <Hero :locationToFind=\"locationToFind\" />\r\n\r\n    </template>\r\n\r\n    <template #fallback>\r\n      <Overlay />\r\n    </template>\r\n\r\n    <template #pending>\r\n      <Overlay />\r\n    </template>\r\n  </Suspense>\r\n\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport Hero from '~/components/hero/hero.vue';\r\nimport Overlay from '~/components/overlay/overlay.vue';\r\nimport type { LocationAddressType } from '~/types/location/location-types';\r\n\r\nconst locationToFind: Ref<string> = ref(\"\")\r\nconst navigator: Ref<Navigator> = ref(window?.navigator)\r\n\r\nconst latitude: Ref<number> = ref(0);\r\nconst longitude: Ref<number> = ref(0);\r\n\r\nconst handleFindLocationByCoordinates = async (lat: number, lon: number): Promise<LocationAddressType | undefined | null> => {\r\n  try {\r\n    return await $fetch('/api/location', {\r\n      method: 'POST',\r\n      body: {\r\n        lat: lat,\r\n        lon: lon\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Failed to get the location data from the server due to: ', error);\r\n  }\r\n}\r\n\r\nconst handleSetCoordinates = () => {\r\n  if (navigator?.value && navigator?.value?.geolocation)\r\n    navigator?.value?.geolocation?.getCurrentPosition(\r\n      (position) => {\r\n        latitude.value = position?.coords?.latitude;\r\n        longitude.value = position?.coords?.longitude;\r\n      },\r\n      (error) => {\r\n        console.error(\"Error fetching location due to:\", error);\r\n      }\r\n    );\r\n  else {\r\n    console.error(\"Geolocation is not supported by this browser.\");\r\n  }\r\n}\r\nhandleSetCoordinates()\r\nwatch([latitude, longitude], async ([newLatitude, newLongitude]: [number, number]) => {\r\n  const locationByCoordinates = await handleFindLocationByCoordinates(newLatitude, newLongitude);\r\n  if (locationByCoordinates) {\r\n    locationToFind.value = locationByCoordinates?.city || locationByCoordinates?.name || \"\";\r\n    navigateTo(`/${locationToFind?.value}`)\r\n  }\r\n})\r\n\r\n</script>\r\n<style lang=\"css\">\r\nhtml,\r\nbody {\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  margin: 0;\r\n  background-color: #103d51;\r\n  color: #ffffff;\r\n}\r\n</style>"],"version":3}