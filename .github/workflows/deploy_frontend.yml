# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - weather-forecast-frontend-app

on:
  push:
    branches:
      - dev
    paths:
      - '.github/workflows/deploy_frontend.yml'
      - 'frontend/**'
      
jobs:

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}  # Cache key based on package-lock.json file
          restore-keys: |
              ${{ runner.os }}-node-modules-

      - name: Run tests     
        run: npm run test

      - name: Build project
        run: npm run build 

      - name: Zip artifact for deployment
        run: zip frontend-zip . -r

      - name: Publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: frontend-zip
    
  deploy:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./frontend

    steps:

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-zip

      - name: Unzip artifact
        run: zip frontend-zip


    # runs-on: ubuntu-latest   # Use the latest version of Ubuntu for the build environment

    # steps:
    #   # Step 1: Checkout code from the repository
    #   - name: Checkout code
    #    

    #   # Step 5: Run tests
    #   - name: Run tests
    #     run: npm test

    #   # Optional Step 6: Lint the code (if you are using a linter like ESLint)
    #   - name: Lint code
    #     run: npm run lint

  # 

  #     - name: Zip artifact for deployment
  #       run: zip release.zip ./* -r

  #     - name: Upload artifact for deployment job
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: node-app
  #         path: release.zip

  # deploy:
    # runs-on: ubuntu-latest
    # needs: build
    # environment:
    #   name: 'Production'
    #   url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    # steps:
    #   - name: Download artifact from build job
    #     uses: actions/download-artifact@v4
    #     with:
    #       name: node-app

    #   - name: Unzip artifact for deployment
    #     run: unzip release.zip
      
    #   - name: Login to Azure
    #     uses: azure/login@v2
    #     with:
    #       client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_54A29E3832A44F9A8904DAB65474BD49 }}
    #       tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_21541C8229684940BB5196CD83277339 }}
    #       subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_135D63E2761F4B10A65274261A70C1D0 }}

    #   - name: 'Deploy to Azure Web App'
    #     id: deploy-to-webapp
    #     uses: azure/webapps-deploy@v3
    #     with:
    #       app-name: 'weather-forecast-frontend-app'
    #       slot-name: 'Production'
    #       package: .
    #       publish-profile: ${{ secrets.AZURE_FRONTEND_PUBLISH_PROFILE }}